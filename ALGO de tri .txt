Esteban DARDILLAC

ALGO tri_selection :

FONCTIONS_UTILISEES
FONCTION tri_selection(l)
VARIABLES_FONCTION

i EST_DU_TYPE NOMBRE
j EST_DU_TYPE NOMBRE
l EST_DU_TYPE LISTE
x EST_DU_TYPE NOMBRE
mini EST_DU_TYPE NOMBRE

DEBUT_FONCTION

POUR i ALLANT_DE i A len(l)
DEBUT_POUR

	POUR j ALLANT_DE i+1 A len(l)
	DEBUT_POUR

		SI (l[mini] > l[j]) ALORS
		DEBUT_SI
		mini PREND_LA_VALEUR j
		FIN_SI

	x PREND_LA_VALEUR l[i]
	l[i] PREND_LA_VALEUR l[mini]
	l[mini] PREND_LA_VALEUR x

	FIN_POUR

FIN_POUR

RENVOYER l

FIN_FONCTION


ALGO listgenerator

FONCTIONS_UTILISEES
FONCTION listgenerator(n)
VARIABLES_FONCTION

i EST_DU_TYPE NOMBRE
l EST_DU_TYPE LISTE
a EST_DU_TYPE NOMBRE

DEBUT_FONCTION

POUR i ALLANT_DE 0 A n
DEBUT_POUR

	a PREND_LA_VALEUR random.randint(-1000, 10000)
	l[0] PREND_LA_VALEUR a
	RENVOYER l

FIN_POUR

FIN_FONCTION



ALGO tri_bulles

FONCTIONS_UTILISEES
FONCTION tri_bulles(l)
VARIABLES_FONCTION

i EST_DU_TYPE NOMBRE
start EST_DU_TYPE FLOAT
echange EST_DU_TYPE BOOLEAN
passage EST_DU_TYPE NOMBRE
l EST_DU_TYPE LISTE

DEBUT_FONCTION

start PREND_LA_VALEUR True
echange PREND_LA_VALEUR True
passage PREND_LA_VALEUR 0

TANT_QUE (echange==True) FAIRE
DEBUT_TANT_QUE

	echange PREND_LA_VALEUR False
	passage PREND_LA_VALEUR 0

	POUR i ALLANT_DE 0 A len(l)-1
	DEBUT_POUR

		SI (l[i] > l[i+1]) ALORS
		DEBUT_SI

		echange PREND_LA_VALEUR True
		l[i], l[i+1] PREND_LA_VALEUR l[i+1], l[i]

		FIN_SI

	passage += 1

	FIN_POUR
FIN_TANT_QUE

AFFICHER "liste triée : \n {} \n nombre de passage : {}".format(liste,passage)

FIN_FONCTION



ALGO tri_bulles_opti

FONCTIONS_UTILISEES
FONCTION tri_bulles_opti(l)
VARIABLES_FONCTION

l EST_DU_TYPE LISTE
i EST_DU_TYPE NOMBRE
j EST_DU_TYPE NOMBRE
sorted EST_DU_TYPE BOOLEAN
passage EST_DU_TYPE NOMBRE

DEBUT_FONCTION

passage PREND_LA_VALEUR 0

POUR i ALLANT_DE 0 A len(l)-1
DEBUT_POUR

	POUR j ALLANT_DE 0 A i-1
	DEBUT_POUR

		SI (l[j+1] < l[j]) ALORS
		DEBUT_SI

		l[j+1], l[j] PREND_LA_VALEUR l[j], l[j+1]
		sorted PREND_LA_VALEUR False
		passage += 1

		FIN_SI
	FIN_POUR
FIN_POUR
	
sorted PREND_LA_VALEUR True
SI (sorted == True) ALORS
DEBUT_SI

AFFICHER "liste rangé :\n {} \n nombre de passage: {}".format(liste, passage)

FIN_SI
 
FIN_FONCTION





